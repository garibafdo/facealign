name: bueno
on:
  push:
    paths:
      - requirements.txt
  schedule:
    - cron: '4 */2 * * *'  # every 2 hours at minute 4

jobs:
  check:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: chk
        run: python utils.py

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade kaggle jq
      - name: Set up Kaggle CLI and push notebooks
        env:
          KAGGLE_CONFIG_DIR: ${{ github.workspace }}/.kaggle
        run: |
          mkdir -p $KAGGLE_CONFIG_DIR
          cat << EOF > $KAGGLE_CONFIG_DIR/kaggle.json
          ${{ secrets.KAGGLE_JSON }}
          EOF
          chmod 600 $KAGGLE_CONFIG_DIR/kaggle.json
          
          # Test authentication and get list of kernels
          echo "Listing kernels to verify auth..."
          KAGGLE_LIST=$(kaggle kernels list --mine --csv)
          echo "Available kernels:"
          echo "$KAGGLE_LIST"
          
          # Define kernels to check
          declare -A kernels
          kernels["kg"]="gadarmukha/auto-run-kernel"
          kernels["kg2"]="gadarmukha/auto-run-kernell"
          
          # Loop over kernels
          for folder in "${!kernels[@]}"; do
            KID="${kernels[$folder]}"
            echo "Checking status of $KID..."
            
            # First check if kernel exists in the list
            if echo "$KAGGLE_LIST" | grep -q "$KID"; then
              echo "Kernel $KID exists. Checking status..."
              
              # Get kernel status
              RAW=$(kaggle kernels status "$KID" --json 2>/dev/null || true)
              
              if [[ -n "$RAW" ]]; then
                if echo "$RAW" | jq -e . >/dev/null 2>&1; then
                  STATUS=$(echo "$RAW" | jq -r '.status')
                  echo "Current status: $STATUS"
                  
                  # Only push if kernel has COMPLETED (finished running)
                  # Don't push if it's running, queued, starting, etc.
                  if [[ "$STATUS" == "KernelWorkerStatus.COMPLETE" ]] || 
                     [[ "$STATUS" == "KernelWorkerStatus.CANCELED" ]] || 
                     [[ "$STATUS" == "KernelWorkerStatus.ERROR" ]]; then
                    echo "Kernel has finished (status: $STATUS). Pushing new version from $folder..."
                    if [[ -d "./$folder" ]]; then
                      kaggle kernels push -p "./$folder"
                    else
                      echo "Error: Folder ./$folder does not exist"
                    fi
                  else
                    echo "Skipping $KID because it is still active (status: $STATUS)."
                    echo "Active statuses include: running, queued, starting, etc."
                  fi
                else
                  echo "Error: Invalid JSON response for $KID"
                  echo "Raw response: $RAW"
                  echo "Skipping to avoid duplicate runs."
                fi
              else
                echo "Error: No response for $KID"
                echo "Skipping to avoid duplicate runs."
              fi
              
            else
              echo "Kernel $KID not found in list. Creating new kernel..."
              if [[ -d "./$folder" ]]; then
                kaggle kernels push -p "./$folder"
              else
                echo "Error: Folder ./$folder does not exist"
              fi
            fi
          done
